/// <reference types="react" />
import { DataTableRowExpansionProps } from './DataTable.props';
export declare function useScrollStatus(): {
    scrolledToTop: boolean;
    setScrolledToTop: (newValue: boolean) => void;
    scrolledToBottom: boolean;
    setScrolledToBottom: (newValue: boolean) => void;
    scrolledToLeft: boolean;
    setScrolledToLeft: (newValue: boolean) => void;
    scrolledToRight: boolean;
    setScrolledToRight: (newValue: boolean) => void;
};
export declare function useLastSelectionChangeIndex(recordIds: unknown[] | undefined): {
    lastSelectionChangeIndex: number | null;
    setLastSelectionChangeIndex: import("react").Dispatch<import("react").SetStateAction<number | null>>;
};
export declare function useRowContextMenu<T>(fetching?: boolean): {
    rowContextMenuInfo: {
        top: number;
        left: number;
        record: T;
    } | null;
    setRowContextMenuInfo: import("react").Dispatch<import("react").SetStateAction<{
        top: number;
        left: number;
        record: T;
    } | null>>;
};
export declare function useRowExpansion<T>({ rowExpansion, records, idAccessor, }: {
    rowExpansion?: DataTableRowExpansionProps<T>;
    records: T[] | undefined;
    idAccessor: string;
}): {
    expandOnClick: boolean;
    isRowExpanded: (record: T) => boolean;
    expandRow: (record: T) => void;
    collapseRow: (record: T) => void;
    collapseProps: import("./DataTable.props").DataTableRowExpansionCollapseProps | undefined;
    content: (record: T) => () => import("react").ReactNode;
} | undefined;
export declare function useRowExpansionStatus(open: boolean, transitionDuration?: number): {
    expanded: boolean;
    visible: boolean;
};
//# sourceMappingURL=hooks.d.ts.map